id: udsio_uds_sink
label: uds_sink
category: '[udsio]'

templates:
  imports: from gnuradio import udsio
  make: udsio.uds_sink(${socket_path})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#     * default
parameters:
- id: socket_path
  label: socket_path
  dtype: file_save
- id: type
  label: Input Type
  dtype: enum
  options: [complex, float, int, short, byte]
  option_attributes:
      size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short, gr.sizeof_char]
  hide: part
- id: vlen
  label: Vector Length
  dtype: int
  default: '1'
  hide: ${ 'part' if vlen == 1 else 'none' }
  
#- id: ...
#  label: ...
#  dtype: ...

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)

inputs:
- domain: stream
  dtype: ${ type }
  vlen: ${ vlen }

outputs:
#- label: ...
#  domain: ...
#  dtype: ...
#  vlen: ...
#  optional: ...

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
